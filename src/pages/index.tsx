import Head from "next/head";
import Image from "next/image";
import { useEffect, useRef, useState } from "react";
import type { FormEvent } from "react";

import { trpc } from "../utils/trpc";
import ReactPlayer from "react-player";
import { toast, Toaster } from "react-hot-toast";
import { Video } from "../utils/search";

const Home = () => {
  const textRef = useRef<HTMLInputElement>(null);
  const [url, setUrl] = useState("");
  const [title, setTitle] = useState("");
  const [videos, setVideos] = useState<Video[]>([]);
  const [episodes, setEpisodes] = useState<Video[]>([]);
  const [hasWindow, setHasWindow] = useState(false);

  const searchQuery = trpc.info.search.useMutation();
  const videoQuery = trpc.info.getVideo.useMutation();
  const episodeQuery = trpc.info.getEpisode.useMutation();

  const handleSubmit = async (e: FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    if (!textRef.current?.value) {
      return;
    }
    const notification = toast.loading("Searching Drama...");
    try {
      const videos = await searchQuery.mutateAsync({
        text: textRef.current.value,
      });
      setVideos(videos.data);
      textRef.current.value = "";
    } catch (error) {
      toast.error("Error while searching drama. Try again. " + error);
    }
    toast.dismiss(notification);
  };

  useEffect(() => {
    if (typeof window !== "undefined") {
      setHasWindow(true);
    }
  }, []);

  return (
    <>
      <Toaster position="top-right" />
      <Head>
        <title>Watch KDrama</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="mx-auto min-h-screen max-w-sm space-y-4 p-6 md:max-w-2xl lg:max-w-4xl">
        <p className="text-5xl font-bold">
          Watch <span className="text-indigo-600">Drama</span>
        </p>
        <form className="flex gap-4" onSubmit={handleSubmit}>
          <input
            ref={textRef}
            className="flex-1 rounded-md bg-slate-800 py-1 px-3 placeholder-slate-400 outline-none"
            type="text"
            placeholder="Search Drama"
          />
          <button className="border-b-2 border-indigo-600 transition-transform duration-200 ease-out hover:scale-110">
            Search
          </button>
        </form>
        {hasWindow && url && (
          <div className="space-y-2">
            <p className="text-lg">{title}</p>
            <ReactPlayer
              className="outline-none"
              width="100%"
              height="auto"
              playing
              controls
              onPlay={() =>
                toast.success("Enjoy!", {
                  duration: 5000,
                })
              }
              url={url}
            />
          </div>
        )}
        <div className="episode-grid">
          {episodes.map((episode, i) => (
            <button
              key={i}
              className="rounded-md bg-slate-800 p-2 text-xs transition-transform duration-200 ease-out hover:scale-110"
              onClick={async () => {
                const notification = toast.loading("Playing...");
                try {
                  const url = await episodeQuery.mutateAsync({
                    path: episode.path,
                  });
                  setUrl(url.data ?? "");
                  setTitle(episode.name);
                } catch (error) {
                  toast.error("Error while fetching episode. Try again.");
                }
                toast.dismiss(notification);
              }}
            >
              EP {episode.name.match(/Episode (.+)/)?.[1]}
            </button>
          ))}
        </div>
        <div className="video-grid">
          {videos.map((video, i) => (
            <div
              key={i}
              className="cursor-pointer space-y-2"
              onClick={async () => {
                const notification = toast.loading("Fetching Episodes...");
                try {
                  const videos = await videoQuery.mutateAsync({
                    path: video.path,
                  });
                  setEpisodes(videos.data);
                } catch (error) {
                  toast.error("Error while fetching episode. Try again. ");
                }
                toast.dismiss(notification);
              }}
            >
              <Image
                className="h-[150px] rounded-md object-cover"
                src={video.img}
                alt="banner"
                width={100}
                height={150}
              />
              <p className="text-xs">{video.name}</p>
            </div>
          ))}
        </div>
      </main>
    </>
  );
};

export default Home;
