import Head from "next/head";
import Image from "next/image";
import { useEffect, useRef, useState } from "react";

import { trpc } from "../utils/trpc";
import { toast, Toaster } from "react-hot-toast";
import { useDebouncer } from "../utils/debouncerHook";
import { Show } from "../../typings";
import Spinner from "../components/Spinner";
import ReactPlayer from "react-player";
import EpisodesGrid from "../components/EpisodesGrid";

const Home = () => {
  const [text, setText] = useState("");
  const [isDrama, setIsDrama] = useState(false);
  const [url, setUrl] = useState("");
  const [shows, setShows] = useState<Show[]>([]);
  const [episodes, setEpisodes] = useState<Show[]>([]);
  const [hasWindow, setHasWindow] = useState(false);
  const selectedShow = useRef("");
  const selectedEpisode = useRef("");
  const title = useRef("");

  // trpc queries
  const searchQuery = trpc.fetcher.search.useMutation({ retry: 3 });
  const episodesQuery = trpc.fetcher.episodes.useMutation({ retry: 3 });
  const episodeQuery = trpc.fetcher.episode.useMutation({ retry: 3 });

  const debounceText = useDebouncer(text);
  useEffect(() => {
    if (debounceText === "") {
      return;
    }
    searchQuery.reset();
    episodesQuery.reset();
    episodeQuery.reset();
    selectedShow.current = "";
    selectedEpisode.current = "";
    setEpisodes([]);
    setShows([]);
    const fetchShows = async () => {
      try {
        const videos = await searchQuery.mutateAsync({
          text: debounceText,
          type: isDrama ? "drama" : "anime",
        });
        setShows(videos.data);
      } catch {
        toast.error("Error");
      }
    };
    fetchShows();
  }, [debounceText]);

  useEffect(() => {
    if (typeof window === "undefined") return;
    setHasWindow(true);
  }, []);

  const handleSelectEpisode = async (episode: Show) => {
    try {
      const url = await episodeQuery.mutateAsync({
        path: episode.path,
        type: isDrama ? "drama" : "anime",
      });
      title.current = episode.name;
      selectedEpisode.current = episode.path;
      setUrl(url.data ?? "");
    } catch {
      toast.error("Error");
    }
  };

  return (
    <>
      <Toaster position="bottom-center" />
      <Head>
        <title>T3 Watch</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="mx-auto min-h-screen max-w-sm space-y-4 p-6 md:max-w-2xl lg:max-w-4xl">
        <p className="text-5xl font-bold">
          <span className="text-indigo-600">T3</span> Watch
        </p>

        {/* searchbar */}
        <input
          value={text}
          onChange={(e) => setText(e.target.value)}
          className="w-full border-b-2 border-indigo-600 bg-transparent py-1 placeholder-slate-400 outline-none"
          type="text"
          placeholder="Search Drama"
        />

        {/* options */}
        <div className="flex gap-8">
          <button
            onClick={() => setIsDrama(false)}
            className={`${
              !isDrama &&
              "underline decoration-indigo-600 decoration-2 underline-offset-4"
            }`}
          >
            Anime
          </button>
          <button
            onClick={() => setIsDrama(true)}
            className={`${
              isDrama &&
              "underline decoration-indigo-600 decoration-2 underline-offset-4"
            }`}
          >
            Korean Drama
          </button>
        </div>
        <p className="text-sm">
          Some of the animes cant be played. I am trying to solve it.
        </p>

        {/* video player */}
        {episodeQuery.isLoading && <Spinner />}
        {episodeQuery.isError && <p>Error</p>}
        {hasWindow && url && (
          <section className="space-y-2">
            <p className="text-lg">{title.current}</p>
            <ReactPlayer
              width="100%"
              height="auto"
              controls
              playing
              url={url}
            />
          </section>
        )}

        {/* episodes */}
        {episodesQuery.isLoading && <Spinner />}
        {episodesQuery.isError && <p>Error</p>}
        {episodeQuery.isSuccess && episodes.length === 0 && (
          <p>No episode out yet.</p>
        )}
        {episodes.length !== 0 && (
          <section>
            <EpisodesGrid
              episodes={episodes}
              handleSelectEpisode={handleSelectEpisode}
              selectedEpisode={selectedEpisode}
            />
          </section>
        )}

        {/* shows */}
        {searchQuery.isLoading && <Spinner />}
        {searchQuery.isError && <p>Error</p>}
        {searchQuery.isSuccess && shows.length === 0 && <p>No shows found.</p>}
        {shows.length !== 0 && (
          <section className="video-grid">
            {shows.map((show, i) => (
              <div
                key={i}
                className={`cursor-pointer space-y-2 transition-transform duration-200 ease-out hover:scale-105 ${
                  selectedShow.current === show.path && "scale-105"
                }`}
                onClick={async () => {
                  try {
                    const videos = await episodesQuery.mutateAsync({
                      path: show.path,
                      type: isDrama ? "drama" : "anime",
                    });
                    selectedShow.current = show.path;
                    setEpisodes(videos.data);
                  } catch {
                    toast.error("Error");
                  }
                }}
              >
                <Image
                  className="h-36 w-full rounded-md object-cover"
                  src={show.img!}
                  width={400}
                  height={800}
                  alt="banner"
                />

                <p
                  className={`text-center text-xs ${
                    selectedShow.current === show.path &&
                    "underline decoration-indigo-600 decoration-[3px] underline-offset-2"
                  }`}
                >
                  {show.name}
                </p>
              </div>
            ))}
          </section>
        )}
      </main>
    </>
  );
};

export default Home;
