import Head from "next/head";
import Image from "next/image";
import { useEffect, useRef, useState } from "react";

import { trpc } from "../utils/trpc";
import ReactPlayer from "react-player";
import { toast, Toaster } from "react-hot-toast";
import { Show as Show } from "../utils/search";
import { useDebouncer } from "../utils/debouncerHook";
import Spinner from "../components/Spinner";

const Home = () => {
  const [text, setText] = useState("");
  const [url, setUrl] = useState("");
  const [title, setTitle] = useState("");
  const [shows, setShows] = useState<Show[]>([]);
  const [episodes, setEpisodes] = useState<Show[]>([]);
  const [hasWindow, setHasWindow] = useState(false);
  const [currentPage, setCurrentPage] = useState(1);
  const postsPerPageRef = useRef(100);

  // pagination related
  const lastPostIndex = currentPage * postsPerPageRef.current;
  const firstPostIndex = lastPostIndex - postsPerPageRef.current;
  const [totalPage, setTotalPage] = useState(0);

  // trpc queries
  const searchQuery = trpc.info.search.useMutation({
    retry: 3,
    onError: (error) => toast.error(error.message),
  });
  const videoQuery = trpc.info.episodes.useMutation({
    retry: 3,
    onError: (error) => toast.error(error.message),
  });
  const episodeQuery = trpc.info.episode.useMutation({
    retry: 3,
    onError: (error) => toast.error(error.message),
  });

  const debounceText = useDebouncer(text);
  useEffect(() => {
    if (debounceText === "") {
      return;
    }
    setEpisodes([]);
    setShows([]);
    setTotalPage(0);
    const fetchShows = async () => {
      const videos = await searchQuery.mutateAsync({
        text: debounceText,
      });
      setShows(videos.data);
    };
    fetchShows();
  }, [debounceText]);

  useEffect(() => {
    if (typeof window !== "undefined") {
      setHasWindow(true);
    }
  }, []);

  return (
    <>
      <Toaster position="bottom-center" />
      <Head>
        <title>Watch KDrama</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="mx-auto min-h-screen max-w-sm space-y-4 p-6 md:max-w-2xl lg:max-w-4xl">
        <p className="text-5xl font-bold">
          Watch <span className="text-indigo-600">Drama</span>
        </p>

        {/* searchbar */}
        <input
          value={text}
          onChange={(e) => setText(e.target.value)}
          className="w-full border-b-2 border-indigo-600 bg-transparent py-1 placeholder-slate-400 outline-none"
          type="text"
          placeholder="Search Drama"
        />

        {/* video player */}
        {episodeQuery.isLoading && <Spinner />}
        {hasWindow && url && (
          <section className="space-y-2">
            <p className="text-lg">{title}</p>
            <ReactPlayer
              width="100%"
              height="auto"
              playing
              controls
              url={url}
            />
          </section>
        )}

        {/* episodes */}
        {videoQuery.isLoading && <Spinner />}
        {episodes.length !== 0 && (
          <section className="episode-grid">
            {episodes.slice(firstPostIndex, lastPostIndex).map((episode, i) => (
              <button
                key={i}
                className="rounded-md bg-slate-800 p-2 text-xs transition-transform duration-200 ease-out hover:scale-110"
                onClick={async () => {
                  const url = await episodeQuery.mutateAsync({
                    path: episode.path,
                  });
                  setUrl(url.data ?? "");
                  setTitle(episode.name);
                }}
              >
                EP {episode.name.match(/Episode (.+)/)?.[1]}
              </button>
            ))}
          </section>
        )}

        {/* pagination */}
        {totalPage > 1 && (
          <section className="flex justify-center gap-4 py-8">
            {Array.from({ length: totalPage }).map((_, i) => (
              <button
                key={i}
                className="h-6 w-6 rounded-md bg-slate-800"
                onClick={() => setCurrentPage(i + 1)}
              >
                {i + 1}
              </button>
            ))}
          </section>
        )}

        {/* shows */}
        {searchQuery.isLoading && <Spinner />}
        {shows.length !== 0 && (
          <section className="video-grid">
            {shows.map((video, i) => (
              <div
                key={i}
                className="cursor-pointer space-y-2"
                onClick={async () => {
                  const videos = await videoQuery.mutateAsync({
                    path: video.path,
                  });
                  setEpisodes(videos.data);
                  setTotalPage(
                    Math.ceil(videos.data.length / postsPerPageRef.current)
                  );
                }}
              >
                <img
                  className="h-[150px] w-full rounded-md object-cover"
                  src={video.img}
                  alt="banner"
                />
                <p className="text-xs">{video.name}</p>
              </div>
            ))}
          </section>
        )}
      </main>
    </>
  );
};

export default Home;
